app TerpTracker {
  db: {
    system: PostgreSQL
  },
  wasp: {
    version: "^0.10.6"
  },

  title: "TerpTracker",

  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
  dependencies: [
    ("react-clock", "3.0.0"),
    ("react-icons", "^4.9.0")
  ]
}

// Views

route TerpHuntRoute { path: "/terp-hunt", to: TerpHunt }

page TerpHunt {
  component: import TerpHunt from "@client/TerpHuntPage.jsx"
}

//temp under construction page

route RootRoute { path: "/", to: UnderConstruction }

page UnderConstruction {
  component: import UnderConstruction from "@client/UnderConstructionPage.jsx"
}

// redirect all pages other than these to 404 page

// route NotFoundRoute { path: "/*", to: NotFoundPage }

// page NotFoundPage {
//   component: import NotFoundPage from "@client/NotFoundPage.jsx"
// }

route ErrorRoute { path: "/404", to: Error404Page }

page Error404Page {
  component: import Error404Page from "@client/Error404Page.jsx"
}


route RootRoute { path: "/main", to: MainPage }

page MainPage {
  authRequired: true,
  component: import Main from "@client/MainPage.jsx"
}

route SignUpRoute { path: "/signup", to: SignUpPage }

page SignUpPage {
  component: import SignUp from "@client/SignUpPage.jsx"
}

route LoginRoute { path: "/login", to: LoginPage }

page LoginPage {
  component: import Login from "@client/LoginPage.jsx"
}

// Producer routes

route ProducerRoute { path: "/producer/:id", to: ProducerPage }

page ProducerPage {
  authRequired: true,
  component: import Producer from "@client/ProducerPage.jsx"

}

route addProducerRoute { path: "/add-producer", to: AddProducerPage }

page AddProducerPage {
  authRequired: true,
  component: import AddProducer from "@client/AddProducerPage.jsx"
}

// Strain routes

route StrainRoute { path: "/strain/:id", to: StrainPage }

page StrainPage {
  authRequired: true,
  component: import Strain from "@client/StrainPage.jsx"
}

route addStrainRoute { path: "/add-strain", to: AddStrainPage }

page AddStrainPage {
  authRequired: true,
  component: import AddStrain from "@client/AddStrainPage.jsx"
}

// Review routes

route ReviewRoute { path: "/review/:id", to: ReviewPage }

page ReviewPage {
  authRequired: true,
  component: import Review from "@client/ReviewPage.jsx"
}

route addReviewRoute { path: "/add-review/:id", to: AddReviewPage }

page AddReviewPage {
  authRequired: true,
  component: import AddReview from "@client/AddReviewPage.jsx"
}


// Entity definitions

entity User {=psl @@unique([id, username])
  id Int @id @default(autoincrement()) 
  username String @unique
  password String
  reviews Review[]
  birthday DateTime @default(now())
psl=}

entity Producer {=psl
  id Int @id @default(autoincrement())
  name String
  location String @default("Unknown")
  contact String @default("Unknown")
  strains Strain[]
  rating Float @default(0)
psl=}

entity Strain {=psl
  id Int @id @default(autoincrement())
  name String 
  producer Producer @relation(fields: [producerId], references: [id], onDelete: Cascade) 
  producerId Int
  batchDate DateTime @default(now())
  productType String
  THC Float @default(0)
  reviews Review[]
psl=}

entity Review {=psl
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId,username], references: [id,username], onDelete: Cascade)
  userId Int @default(0)
  username String @default("Unknown")
  rating Float @default(0)
  comment String @default("No comment")
  strain Strain @relation(fields: [strainId], references: [id], onDelete: Cascade)
  strainId Int
psl=}

// Queries and Actions for Producer entities

query getProducer {
  fn: import { getProducer } from "@server/queries.js",
  entities: [Producer]
} 

query getProducers {
  fn: import { getProducers } from "@server/queries.js",
  entities: [Producer]
}

action createProducer {
  fn: import { createProducer } from "@server/actions.js",
  entities: [Producer]
}

action updateProducer {
  fn: import { updateProducer } from "@server/actions.js",
  entities: [Producer]
}

action deleteProducer {
  fn: import { deleteProducer } from "@server/actions.js",
  entities: [Producer]
}

action updateProducerRating {
  fn: import { updateProducerRating } from "@server/actions.js",
  entities: [Producer]
}

// Queries and Actions for Strain entities

query getStrain {
  fn: import { getStrain } from "@server/queries.js",
  entities: [Strain]
}

query getStrains {
  fn: import { getStrains } from "@server/queries.js",
  entities: [Strain]
}

action createStrain {
  fn: import { createStrain } from "@server/actions.js",
  entities: [Strain]
}

action updateStrain {
  fn: import { updateStrain } from "@server/actions.js",
  entities: [Strain]
}

action deleteStrain {
  fn: import { deleteStrain } from "@server/actions.js",
  entities: [Strain]
}

// Queries and Actions for Review entities

query getReview {
  fn: import { getReview } from "@server/queries.js",
  entities: [Review]
}

query getReviews {
  fn: import { getReviews } from "@server/queries.js",
  entities: [Review]
}

action createReview {
  fn: import { createReview } from "@server/actions.js",
  entities: [Review]
}

action updateReview {
  fn: import { updateReview } from "@server/actions.js",
  entities: [Review]
}

action deleteReview {
  fn: import { deleteReview } from "@server/actions.js",
  entities: [Review]
}


// Queries and Actions for User entities

query getUser {
  fn: import { getUser } from "@server/queries.js",
  entities: [User]
}